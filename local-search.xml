<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++内联(inline)函数</title>
    <link href="/2021/02/22/C-%E5%86%85%E8%81%94-inline-%E5%87%BD%E6%95%B0/"/>
    <url>/2021/02/22/C-%E5%86%85%E8%81%94-inline-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="内联函数要解决什么问题"><a href="#内联函数要解决什么问题" class="headerlink" title="内联函数要解决什么问题"></a>内联函数要解决什么问题</h2><p>函数调用是需要额外开销的,假如有一些短小简单的函数被频繁调用,会大量消耗栈空间。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//判断闰年</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isLeapYear</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">leapYearsCount</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; years)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;years.size();++i)&#123;<br>        <span class="hljs-keyword">if</span>(isLearYear(years[i])) ++ans;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>isLeapYear()这个简单函数被多次调用,浪费栈空间和时间！<br>有没有什么办法节约这部分开销</p><h2 id="内联函数原理"><a href="#内联函数原理" class="headerlink" title="内联函数原理"></a>内联函数原理</h2><p>有人会这么写代码</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">leapYearsCount</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; years)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;years.size();++i)&#123;<br>        <span class="hljs-keyword">if</span>(year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>) ++ans;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>减少了多次调用函数的开销,但是破坏了函数的可读性,简单的说就是代码变丑了,代码会变的不易修改。</p><blockquote><p>为了实现编译器自动替换函数体,我们可以通过<strong>inline</strong>关键字,将函数声明为<strong>内联函数</strong>。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//判断闰年</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">isLeapYear</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">leapYearsCount</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; years)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;years.size();++i)&#123;<br>        <span class="hljs-keyword">if</span>(isLearYear(years[i])) ++ans;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样既可以也函数形式在程序里使用isLeapYear(), 又不用在运行时承担额外开销。</p><h2 id="内联函数优缺点"><a href="#内联函数优缺点" class="headerlink" title="内联函数优缺点"></a>内联函数优缺点</h2><blockquote><p>优点</p><ol><li>它通过避免函数调用所带来的开销来提高你程序的运行速度。</li><li>当函数调用发生时，它节省了变量弹栈、压栈的开销。</li><li>它避免了一个函数执行完返回原现场的开销。</li><li>通过将函数声明为内联，你可以把函数定义放在头文件内。</li></ol></blockquote><blockquote><p>缺点：</p><ol><li>因为代码的扩展，内联函数增大了可执行程序的体积。</li><li>C++内联函数的展开是中编译阶段，这就意味着如果你的内联函数发生了改动，那么就需要重新编译代码。</li><li>当你把内联函数放在头文件中时，它将会使你的头文件信息变多，不过头文件的使用者不用在意这些。</li><li>有时候内联函数并不受到青睐，比如在嵌入式系统中，嵌入式系统的存储约束可能不允许体积很大的可执行程序。</li></ol></blockquote><h2 id="什么时候函数适合定义为内联"><a href="#什么时候函数适合定义为内联" class="headerlink" title="什么时候函数适合定义为内联"></a>什么时候函数适合定义为内联</h2><ol><li>函数尽量的短(&lt;10行)</li><li>函数简单(不能有复杂语句while,switch等)</li><li>内联函数不能递归调用自己</li><li>inline可以修饰虚函数,但是虚函数发生动态绑定时不能内联</li></ol><blockquote><p>注意:<br>inline声明是对编译器的一种<strong>建议</strong>,编译器是否觉得采取你的建议取决于函数是否符合内联的有利条件。<br>如果<strong>函数体非常大</strong>，那么编译器将忽略函数的内联声明，而将内联函数作为普通函数处理。</p></blockquote><h2 id="内联函数和宏定义的区别"><a href="#内联函数和宏定义的区别" class="headerlink" title="内联函数和宏定义的区别"></a>内联函数和宏定义的区别</h2><ol><li>宏由预处理器在预处理阶段展开,内联函数是由编译器控制的。</li><li>在编译的时候，内联函数直接被嵌入到目标代码中去，而宏只是一个简单的文本替换。</li><li>内联函数是函数,可以进行诸如类型安全检查、语句是否正确等编译功能。宏不是函数,不具有这样的功能。</li><li>内联函数在运行时可调试，宏定义不可以。</li></ol><h2 id="编译器默认内联的情况"><a href="#编译器默认内联的情况" class="headerlink" title="编译器默认内联的情况"></a>编译器默认内联的情况</h2><p>在类体内定义的函数会被编译器自动声明为内联函数。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.cnblogs.com/qg-whz/p/4641479.html">博客-C++内联函数</a></li><li><a href="https://www.runoob.com/cplusplus/cpp-inline-functions.html">菜鸟教程-C++内联函数</a></li><li><a href="https://www.cnblogs.com/chengxuyuancc/archive/2013/04/04/2999844.html">博客-宏定义和内联函数区别</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>C++深入学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++的多态和虚函数原理</title>
    <link href="/2021/02/19/C++%E7%9A%84%E5%A4%9A%E6%80%81%E5%92%8C%E8%99%9A%E5%87%BD%E6%95%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2021/02/19/C++%E7%9A%84%E5%A4%9A%E6%80%81%E5%92%8C%E8%99%9A%E5%87%BD%E6%95%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="多态概念"><a href="#多态概念" class="headerlink" title="多态概念"></a>多态概念</h1><h2 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a>什么是多态</h2><p>多态是面向对象三大特性之一: <strong>封装,继承,多态</strong>。</p><blockquote><p>多态指同一个实体同时具有多种形式。</p></blockquote><blockquote><p>多态（Polymorphism）按字面的意思就是“多种状态”。在面向对象语言中，接口的多种不同的实现方式即为多态。</p></blockquote><blockquote><p>同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的<strong>指针</strong>，来调用派生类中的方法。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="百度百科-多态">[1]</span></a></sup></p></blockquote><p>多态可以根据状态确定时间分为: <strong>静态多态</strong> 和 <strong>动态多态</strong>。<br>静态多态: 编译期确定<br>动态多态: 运行时确定</p><h2 id="为什么需要多态"><a href="#为什么需要多态" class="headerlink" title="为什么需要多态"></a>为什么需要多态</h2><p>为了实现代码复用。</p><p>假设我要写一个排序函数<br>如果我写成:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>Sort()函数接受一个int类型数组并对该数组进行排序。<br>但是int类型是写死了的,这意味着如果我还要对double,long等类型进行排序,还需要写几个大同小异的函数。</p></blockquote><p>例如: </p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SortInt</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> </span>&#123;...&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SortDouble</span><span class="hljs-params">(<span class="hljs-keyword">double</span>[] a)</span> </span>&#123;...&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SortLong</span><span class="hljs-params">(<span class="hljs-keyword">long</span>[] a)</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>蛋疼的<strong>重复</strong>,重复不仅浪费时间,还会增加你出错的几率,假如我们想改变排序方式,就得同时改3个函数。这好吗? 这不好。<br>我们可以通过<strong>模版</strong>来解决这个问题,这是一种静态多态。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomAccessIterator</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(RandomAccessIterator first, RandomAccessIterator last)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (first != last) &#123;<br>        __introsort_loop(first, last, value_type(first), __lg(last - first) * <span class="hljs-number">2</span>);<br>        __final_insertion_sort(first, last);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>这是C++的 sort()函数源码。它是一个模板函数，只接受随机访问迭代器。<br>只要我们放入的参数类型可以比较,且有随机访问迭代器。就都可以使用该函数。美滋滋。</p></blockquote><p>动态多态的实现和解决的问题,后面再谈。</p><p>总而言之我们通过多态来实现 函数/类/接口/等其他实体 的一次定义就可以适应不同的类型。</p><h2 id="怎么实现多态"><a href="#怎么实现多态" class="headerlink" title="怎么实现多态"></a>怎么实现多态</h2><p>多态的实现都是通过<strong>延迟确认类型</strong>来确定的。</p><p>例如上面的代码例子,函数的参数类型在我写代码的时候就确定下来了,这就很僵化。<br>静态多态就是把这个类型确定的时间延迟到了编译时由编译器确定。<br>动态多态就是在程序跑起来了,运行到某个对象的虚函数的时候根据该对象的<strong>虚指针</strong>找到<strong>虚表</strong>,然后确定具体调用哪个函数。</p><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.9/images/C++/1.png" alt="两种多态"></p><hr><h1 id="虚函数详解"><a href="#虚函数详解" class="headerlink" title="虚函数详解"></a>虚函数详解</h1><h2 id="什么是虚函数"><a href="#什么是虚函数" class="headerlink" title="什么是虚函数"></a>什么是虚函数</h2><blockquote><p>虚函数 是在基类中使用关键字<strong>virtual</strong>声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。<br>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为动态链接，或后期绑定。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="菜鸟教程-C++多态">[2]</span></a></sup></p></blockquote><p>C++动态多态是通过虚函数实现的。</p><p>在代码中存在<strong>继承</strong>关系时,假如在基类中声明了虚函数,然后派生类覆盖/重写(<strong>override</strong>)了基类的虚函数,我们就可以通过基类的指针或引用调用派生类重写的方法。</p><h2 id="代码样例"><a href="#代码样例" class="headerlink" title="代码样例"></a>代码样例</h2><p>假设我要做一个武器系统,现在预定有三种武器: 刀,枪,棍。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// v0.1</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Knife</span>&#123;</span> <span class="hljs-comment">//刀</span><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Knife() &#123;atk = <span class="hljs-number">2</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;劈砍\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Spear</span>&#123;</span> <span class="hljs-comment">//枪</span><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Spear() &#123;atk = <span class="hljs-number">3</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;刺击\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cudgel</span>&#123;</span> <span class="hljs-comment">//棍</span><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Cudgel() &#123;atk = <span class="hljs-number">4</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;砸\n&quot;</span>;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>写完了,但是代码里有许多的重复部分,在写程序时可以确定是: <strong>重复是万恶之源</strong>。<br>学过继承的话,我们就知道,这个时候应该把这三个类的共有部分抽出来做成一个基类。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// v0.2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weapon</span>&#123;</span> <span class="hljs-comment">//武器基类</span><br>    <span class="hljs-keyword">protected</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Weapon() &#123;atk = <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;不知道怎么攻击\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Knife</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Knife() &#123;atk = <span class="hljs-number">2</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;劈砍\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Spear</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Spear() &#123;atk = <span class="hljs-number">3</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;刺击\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cudgel</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Cudgel() &#123;atk = <span class="hljs-number">4</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;砸\n&quot;</span>;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>我们把武器的攻击力 atk成员放入Weapon,但是攻击函数 Attack()仍然放在派生类里。<br>因为在Weapon里我们是不知道武器怎么攻击的,所以攻击函数是空的。</p><p>现在在mian()函数里,如果我们通过基类的指针指向派生类内存,然后调用Attack()会发生什么?<br>这是一个常见操作,因为通过基类指针处理派生类可以使我们关注派生类的<strong>共性</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Weapon *weapon;<br>    Knife knife;<br>    Spear spear;<br>    Cudgel cudgel;<br><br>    weapon = &amp;knife;<br>    weapon-&gt;Attack();<br>    weapon = &amp;spear;<br>    weapon-&gt;Attack();<br>    weapon = &amp;cudgel;<br>    weapon-&gt;Attack();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果显而易见:</p><blockquote><p>不知道怎么攻击<br>不知道怎么攻击<br>不知道怎么攻击</p></blockquote><p>因为weapon找不派生类的Attack()函数,它只知道它自己的Attack()。</p><p>现在我们用上虚函数,就是在基类需要声明为虚函数的函数前面加上 <strong>virtual</strong>关键字。<br>进行重写: 在具体派生类声明一个同函数签名的函数,<strong>并用override</strong>修饰。可以不加,建议加上。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// v0.3</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weapon</span>&#123;</span> <span class="hljs-comment">//武器基类</span><br>    <span class="hljs-keyword">protected</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Weapon() &#123;atk = <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;不知道怎么攻击\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Knife</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Knife() &#123;atk = <span class="hljs-number">2</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;劈砍\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Spear</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Spear() &#123;atk = <span class="hljs-number">3</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;刺击\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cudgel</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Cudgel() &#123;atk = <span class="hljs-number">4</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;砸\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Weapon *weapon;<br>    Knife knife;<br>    Spear spear;<br>    Cudgel cudgel;<br><br>    weapon = &amp;knife;<br>    weapon-&gt;Attack();<br>    weapon = &amp;spear;<br>    weapon-&gt;Attack();<br>    weapon = &amp;cudgel;<br>    weapon-&gt;Attack();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果:</p><blockquote><p>劈砍<br>刺击<br>砸</p></blockquote><p>我们成功使用了虚函数! 我们现在可以通过基类的指针访问派生类实现的Attack()函数。</p><p>但是这什么怎么实现的呢?<br>为什么通过基类的指针就会访问派生类的Attack()而不是基类的Attack()呢?</p><h2 id="虚函数表和虚指针"><a href="#虚函数表和虚指针" class="headerlink" title="虚函数表和虚指针"></a>虚函数表和虚指针</h2><blockquote><p>虚函数表(vtbl)<br>在每个包含虚函数的类中都存在着一个函数地址的<strong>数组</strong>。这就是虚函数表。<br>当我们用父类的指针来操作一个子类的时候，这张虚函数表指明了实际所应该调用的函数。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="博客-深入理解C++虚函数表">[3]</span></a></sup></p><ol><li>虚函数表的数据结构就是: <strong>函数指针数组</strong></li><li>一个包含虚函数的类的所有实例共享一张虚函数表</li></ol></blockquote><blockquote><p>虚指针(vptr)<br>每个包含虚函数的类都存在一个隐藏成员,就是虚指针(vptr),虚指针指向虚函数表。<br>虚指针的作用就是方便类的每一个实例对象快速找到该类的虚函数表。</p></blockquote><h2 id="内存分布"><a href="#内存分布" class="headerlink" title="内存分布"></a>内存分布</h2><p>用上方的代码例子来说明虚表和虚指针的内存分布。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weapon</span>&#123;</span> <span class="hljs-comment">//武器基类</span><br>    <span class="hljs-keyword">protected</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Weapon() &#123;atk = <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;不知道怎么攻击\n&quot;</span>;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.9/images/C++/2.png" alt="Weapon的虚表"></p><p>类实例对象的虚指针是<strong>隐藏</strong>的,它指向该类的虚表的起点。所有相同的相同类的实例的虚指针都是指向的同一张虚表。</p><blockquote><p>虚表有一个尾节点,表示虚表的结束。就像字符串的结束字符<code>&#39;/0&#39;</code>一样。<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="博客-C++虚函数表原理浅析">[4]</span></a></sup></p></blockquote><p>假如派生类 Knife这样定义</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Knife</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Knife() &#123;atk = <span class="hljs-number">2</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-title">Bleed</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;附带流血效果\n&quot;</span>;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>Knife没有重写基类的虚函数,并且自己又声明一个新的虚函数,虚表会是什么样的?</p><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.9/images/C++/3.png" alt="Knife的虚表"><br>因为没有重写Attack(),Knife虚表前面和Weapon一样,即如果实例调用Attack()函数的话会被虚表导航到Weapon基类的Attack()函数那里。<br>同时Knife虚表后面有新的节点,指向自己的Bleed()函数。</p><p>现在Knife重写Attack()函数</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Knife</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Knife() &#123;atk = <span class="hljs-number">2</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;劈砍\n&quot;</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-title">Bleed</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;附带流血效果\n&quot;</span>;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.9/images/C++/4.png" alt="重写之后的Knife的虚表"></p><p>我们发现重写之后,原来指向基类Attack()的函数指针被覆盖了,变成了指向自己重写之后的Attack()函数。</p><h2 id="虚函数使用建议及解释"><a href="#虚函数使用建议及解释" class="headerlink" title="虚函数使用建议及解释"></a>虚函数使用建议及解释</h2><ol><li><p><strong>构造函数</strong>能声明成虚函数吗?</p><blockquote><p>不能！<br>调用构造函数函数时,对象的内存空间还没有确定下来,那么虚指针(vptr)也不存在,无法找到虚表。</p></blockquote></li><li><p>基类的析构函数最好声明为虚函数。</p><blockquote><p>为了防止内存泄漏,当我们用基类的指针delete派生类的内存时,如果基类的析构函数不是虚函数,那么delete操作符只会调用基类的析构函数,如果派生类动态申请了内存就无法释放。</p></blockquote></li></ol><blockquote><p>假如基类析构函数<strong>不是</strong>虚函数: 通过基类指针delete派生类,只调用基类的析构函数。<br>假如基类析构函数<strong>是</strong>虚函数: 通过基类指针delete派生类,先调用派生类的析构函数,然后调用基类的析构函数。</p></blockquote><h2 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h2><blockquote><p>基类声明的虚函数可以不实现,那么该函数就是<strong>纯虚函数</strong>。</p></blockquote><blockquote><p>至少有一个纯虚函数的类就是抽象类,因为纯虚函数没有实现,抽象类是<strong>无法被实例化</strong>的。<br>派生自抽象类的类<strong>必须重写</strong>抽象基类的所有纯虚函数,否则会引发编译错误。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weapon</span>&#123;</span> <span class="hljs-comment">//武器基类</span><br>    <span class="hljs-keyword">protected</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Weapon() &#123;atk = <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-comment">// 纯虚函数的函数体被 &quot;=0;&quot; 代替,表示基类不实现,留给派生类实现。</span><br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h2><blockquote><p>重载: 函数名相同,函数的参数个数、参数类型或参数顺序三者中必须至少有一种不同。函数返回值的类型可以相同,也可以不相同。发生在一个类内部。</p></blockquote><blockquote><p>重写: 也叫做覆盖,一般发生在子类和父类继承关系之间。子类重新实现父类中有相同名称和参数的虚函数。</p></blockquote><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://baike.baidu.com/item/%E5%A4%9A%E6%80%81">百度百科-多态</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.runoob.com/cplusplus/cpp-polymorphism.html">菜鸟教程-C++多态</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.cnblogs.com/Mered1th/p/10924545.html#%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3c-%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8">博客-深入理解C++虚函数表</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.cnblogs.com/zhxmdefj/p/11594459.html">博客-C++虚函数表原理浅析</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>C++深入学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>细节和抽象</title>
    <link href="/2021/02/06/%E7%BB%86%E8%8A%82%E5%92%8C%E6%8A%BD%E8%B1%A1/"/>
    <url>/2021/02/06/%E7%BB%86%E8%8A%82%E5%92%8C%E6%8A%BD%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>细节和抽象是相对的。</p><p>应用程序的细节依赖于高级语言的抽象<br>高级语言的细节依赖于汇编语言的抽象<br>……<br>低层的抽象构成了高层的细节,更高层的细节又依赖于本层的抽象</p><p>一层层对低层的抽象，构成了我们现在使用的应用程序。<br>可以说所有系统设计的艺术，归根到底就是<strong>抽象封装</strong>的艺术。</p><p>把不同的细节组合成元件，把元件组合成更大的元件，随着一层层的组装，思路会越来越清晰，因为”细节“被屏蔽了。</p><h2 id="设计模式六大原则之依赖倒置原则"><a href="#设计模式六大原则之依赖倒置原则" class="headerlink" title="设计模式六大原则之依赖倒置原则"></a>设计模式六大原则之依赖倒置原则</h2><p>描述：<br>高层模块不应该依赖低层模块，两者都应该依赖其抽象。抽象不应该依赖细节，细节应该依赖抽象。</p><p>核心思想：<strong>要面向接口编程，不要面向实现编程。</strong></p><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><ol><li>细节是多变的，如果高层模块依赖于低层模块，那么低层变化就导致高层也得跟着变化。</li><li>如果通过接口把两层都抽象出来，高层通过低层的接口调用细节，那么无论低层怎么变化，只要接口没有变化，那么高层就不用变化。</li><li>抽象不应该依赖细节，抽象只关注我要做什么，实现是细节的工作。同时高层的抽象也依赖的是低层的抽象。</li><li>细节应该依赖于抽象，细节太多，太杂了，抽象就是对细节对约束。</li><li>写程序的时候，先把我需要什么想好，再去想实现需求的细节。</li><li>把层次分清，写的程序就是千层饼，清晰明了。如果所有程序互相调用，挤成一团，牵一发而动全身，那么这个程序就是失败的一坨不明物体。</li></ol><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.7/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.png" alt="细节依赖细节"><br><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.7/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.png" alt="细节依赖抽象"></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>战棋SRPG游戏开发-序</title>
    <link href="/2021/02/05/%E6%88%98%E6%A3%8BSRPG%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%BA%8F/"/>
    <url>/2021/02/05/%E6%88%98%E6%A3%8BSRPG%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是SRPG"><a href="#什么是SRPG" class="headerlink" title="什么是SRPG"></a>什么是SRPG</h2><blockquote><p>战略角色扮演游戏（Strategy Role-Playing Game），日本又称角色扮演模拟游戏，简称SRPG或RSLG，最大特性在于战斗系统中拥有类似战略游戏的游戏方式，以及具有类似角色扮演游戏的剧情推演及人物成长。</p></blockquote><p>我玩过的最优秀的SRPG游戏还要数: 火焰纹章系列<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="火焰纹章wiki">[1]</span></a></sup><br>玩家控制多个角色与敌人在一个地图上展开战斗。把角色抽象成棋子来模拟一场场战役。</p><p>一些SRPG游戏截图:<br><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.6/images/SRPG/01.jpg" alt="火焰纹章之烈火之剑 2003年发行"></p><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.6/images/SRPG/02.jpg" alt="战律 2019年发行"></p><hr><h1 id="开发计划"><a href="#开发计划" class="headerlink" title="开发计划"></a>开发计划</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我决定参考玩过的SRPG游戏，使用Unity3D开发一款战棋类SRPG游戏。<br>核心系统: 战棋类战斗系统<br>游戏主题: 仙侠风格<br>但是不会画画，所以开发过程中一切从简。😭</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li>游戏引擎: <a href="https://unity.cn/releases">Unity3D</a></li><li>绘画软件: <a href="https://www.aseprite.org/">Aseprite</a></li><li>版本控制: <a href="https://git-scm.com/">Git</a></li><li>远程仓库: <a href="https://github.com/">GitHub</a></li><li>GitGUI软件: <a href="https://desktop.github.com/">GitHub Desktop</a> &amp; <a href="https://www.sourcetreeapp.com/">Sourcetree</a></li><li>项目管理: <a href="https://trello.com/zh-Hans">Trello</a></li></ul><h2 id="详细计划"><a href="#详细计划" class="headerlink" title="详细计划"></a>详细计划</h2><ol><li>实现网格地图生成</li><li>实现战斗单位</li><li>实现战斗全过程</li><li>后面还没想好……</li></ol><p>实现原则: 数据和显示分离 ，地图数据和战斗队伍数据不能耦合<br>对于优化: 有优化思路但是实现比较复杂的可以先把优化点和思路记下，先让程序跑起来<br>对于美术: 先不想着多好多美术效果，怎么简单怎么来，主要目标是游戏可玩。</p><h2 id="博客更新"><a href="#博客更新" class="headerlink" title="博客更新"></a>博客更新</h2><p>在每一阶段完成之后,我都会抽时间出来写一篇教程来总结前面所做的工作。<br>教程不会大段贴代码,我会尽力描述我的实现思路和想法。</p><p>代码可以直接看源码,偷偷说一下～ 我没写注释(￣∇￣)<br><a href="https://github.com/impulses-1/SRPG">项目源码GitHub</a></p><p>先放一张现阶段的截图吧,还不可以玩 o(╯□╰)o<br><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.6/images/SRPG/03.png" alt="image"></p><h2 id="絮叨"><a href="#絮叨" class="headerlink" title="絮叨"></a>絮叨</h2><p>如果觉得我的博客或者项目对于学习有帮助的话，欢迎在评论区留言，说几句废话也比冷冷清清强嘛。<br>如果我的博客哪里有错误或者错别字，一定要在评论区提醒我，博主有强迫症，肯定火速订正。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zh.wikipedia.org/wiki/%E7%81%AB%E7%84%B0%E4%B9%8B%E7%BA%B9%E7%AB%A0%E7%B3%BB%E5%88%97">火焰纹章wiki</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>SRPG游戏开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初次见面</title>
    <link href="/2021/02/04/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2/"/>
    <url>/2021/02/04/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>你好<br>我是一个计科专业的大三学生，一个学习中的游戏开发者。<br>这里是我的个人博客网站，我会在这里分享一些游戏相关的教程，促进自己也能帮助他人。</p><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.1/images/01.jpg" alt="image"></p><hr><h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><p>我目前学习的比较多的是Unity3D，所以教程大多会与Unity3D相关。</p><h2 id="再见"><a href="#再见" class="headerlink" title="再见"></a>再见</h2><p>那么，希望这个新搭建的博客网站能见证我的成长之路。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>关于我</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
