<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>战棋游戏开发-像素字体篇</title>
    <link href="/2021/11/05/%E6%88%98%E6%A3%8B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%83%8F%E7%B4%A0%E5%AD%97%E4%BD%93%E7%AF%87/"/>
    <url>/2021/11/05/%E6%88%98%E6%A3%8B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%83%8F%E7%B4%A0%E5%AD%97%E4%BD%93%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为Unity原本的Text组件会有字体不清晰的问题，所以我准备使用<a href="https://docs.unity3d.com/Packages/com.unity.textmeshpro@1.3/manual/index.html">TextMesh Pro</a>组件来替换掉原本的Text。</p><p>后来发现使用TMP还需要生成字体资源，所以干脆去网上找了一个像素字体资源。<br>下面记录一下在使用TMP生成像素字体时遇到对各种问题。</p><h2 id="像素中文字体"><a href="#像素中文字体" class="headerlink" title="像素中文字体"></a>像素中文字体</h2><p>导入TMP资源之后发现默认字体资源是没有中文的，所以我们需要一份中文字体资源，然后使用TMP提供的工具来生成TMP字体资源。</p><p>最终我找到一份像素字体资源:<a href="https://github.com/Luckeee/mplus_hzk_12">mplus_hzk_12</a><br>白嫖了字体资源，感谢一波。</p><p>在使用TMP工具<strong>Font Asset Creator</strong>的生成资源的过程中，我们会用到上面项目中的两份文件，分别是<strong>mplus_hzk_12.ttf</strong>(也可以选择其他大小的字体资源)和<strong>gb2312.txt</strong>。</p><h2 id="TMP字体资源生成"><a href="#TMP字体资源生成" class="headerlink" title="TMP字体资源生成"></a>TMP字体资源生成</h2><p>找到【窗口】-&gt;【TextMesh Pro】-&gt;【Font Asset Creator】<br><img src="https://cdn.jsdelivr.net/gh/cnImpulse/SRPG@develop/Images/02.png" alt="Font Asset Creator"></p><p>导入的TMP资源的Documentation文件夹下有英文指导文档，可以参考一下。</p><p>下面来讲一下窗口下的各个参数  </p><blockquote><p>Source Font File: 就是需要我们刚刚下载的<strong>mplus_hzk_12.ttf</strong>字体资源文件<br>Sampling Point Size: 文档建议选择Auto Sizing选项<br>Padding: 决定生成的每个字体之间的像素间距<br>Packing Method: Fast模式生产速度快很多，Optimum 可以计算出图集上能承载的最大的字号<br>Atlas Resolution: 生成的图集分辨率(踩坑点: 太小了的话，可能字体放不下)<br>Character Set: 选择生成的字符集，这里我选择的是Characters From File，然后就用上了<strong>gb2312.txt</strong>文件 (踩坑点: 后面说)<br>Render Mode: 渲染模式，因为我们是像素字体，应该选择SMOOTH模式的话会糊掉，其他的几个模式不太清楚差别<br>Get Kerning Pair: 不知道干什么的</p></blockquote><p>点击生成TMP字体文件，给TMP_Text组件挂上新鲜出炉的像素字体资源。<br>报了警告”The character used for Underline is not available in font。”</p><p>查了一波资料，发现不是什么大事，可以在TMP设置里面关掉警告。<br><img src="https://cdn.jsdelivr.net/gh/cnImpulse/SRPG@develop/Images/03.png" alt="TMP Set"></p><p>前面两个设置默认字体资源和备选字体资源,下面可以设置关闭报警。</p><h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><p>开始测试，发现了一个问题，在TMP_Text下输入汉字是正常的像素字体，但是输入的数字和英文字母不是，这意味着没有在像素字体资源下找到字符，所以使用的是备选字体资源。</p><p>但是打开<strong>gb2312.txt</strong>发现是有数字和英文字母的，查看了一下刚刚生成字体资源，发现英文字母和汉字的编码是<strong>gb2312</strong>，但是TMP把它当成Unicode处理的，汉字没有问题是因为gb2312和Unicode的汉字编码是相同的。</p><p>解决方法: 又生成了一份小的字体资源，生成的时候Character Set选的是Extender Ascll，将该字体设置为备选字体资源，然后测试一切正常。</p>]]></content>
    
    
    <categories>
      
      <category>战棋游戏开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>战棋游戏开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>战棋游戏开发-网格地图篇</title>
    <link href="/2021/10/04/%E6%88%98%E6%A3%8B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E7%BD%91%E6%A0%BC%E5%9C%B0%E5%9B%BE%E7%AF%87/"/>
    <url>/2021/10/04/%E6%88%98%E6%A3%8B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E7%BD%91%E6%A0%BC%E5%9C%B0%E5%9B%BE%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="网格地图介绍"><a href="#网格地图介绍" class="headerlink" title="网格地图介绍"></a>网格地图介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource/images/SRPG/02.jpg" alt="战律"></p><p>网格地图由一个个的tile构成整个地图。每个tile包括一些基本信息, 例如贴图, 位置, 地形等等。<br>比较常见的tile有四边形和六边形, 例如文明的地图就是六边形的。</p><blockquote><p>我很喜欢这样的地图, 从视觉角度讲, 网格地图给人一种秩序感, 这和我们开发的战棋游戏类型的策略性是比较契合的。我知道的到所有战棋游戏的地图都是网格化的, 只是实现细节不同而已。</p></blockquote><blockquote><p>从游戏开发的角度讲, 使用tile铺设地图可以减少美术开发量, 可以用有限个tile构造出各式各样的地图。</p></blockquote><h2 id="网格地图实现"><a href="#网格地图实现" class="headerlink" title="网格地图实现"></a>网格地图实现</h2><p>为了程序解耦, 我们需要将数据和显示分离。</p><p>然后我们先关注单个的网格单元需要哪些数据。<br>然后思考网格地图需要哪些数据, 又该怎么组织网格单元数据。</p><h3 id="网格单元数据-GridData"><a href="#网格单元数据-GridData" class="headerlink" title="网格单元数据(GridData)"></a>网格单元数据(GridData)</h3><blockquote><p>最基础的网格单元数据: 位置, 类型</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 网格单元数据</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GridData</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Vector2Int m_GridPos;<br>    <span class="hljs-keyword">private</span> GridType m_GridType;<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 网格地形类型</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> GridType<br>&#123;<br>    None,<br>    Normal,<br>    Wall,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="网格地图数据"><a href="#网格地图数据" class="headerlink" title="网格地图数据"></a>网格地图数据</h3><blockquote><p>最基础的网格地图数据: 宽, 高, 所有网格单元数据</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GridMapData</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m_Width = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m_Height = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">int</span>, GridData&gt; m_GridList = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>Q1: 为什么用字典存储网格单元数据, 而不是二维数组?<br>A: 因为地图不一定是矩形, 可能是不规则的, 对于不存在的网格单元数据, 我们不需要存储。</p></blockquote><blockquote><p>Q2: 为什么字典的key值数据类型是int而不是Vector2Int?<br>A: 这里为了简单, 把网格单元数据m_GridPos转化成了int类型。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-comment">// 根据地图宽, 计算出每个位置的唯一index</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetGridIndex</span>(<span class="hljs-params">Vector2Int gridPos</span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> gridPos.y * m_Width + gridPos.x;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="网格地图实体"><a href="#网格地图实体" class="headerlink" title="网格地图实体"></a>网格地图实体</h3><p>我们需要还需要一个GridMap类来显示整个网格地图。<br>这里借助的是Unity里面的tilemap组件, 我就不过多介绍这个组件了。</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GridMap</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">private</span> GridMapData m_Data = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> TileBase empty = <span class="hljs-literal">null</span>, wall = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> Tilemap m_Tilemap = <span class="hljs-literal">null</span>;<br><br>    ... <span class="hljs-comment">// 省略类初始化的代码和资源加载代码, empty, wall按理不应该放在类内部</span><br><br>    <span class="hljs-comment">// 使用tilemap显示地图</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RefreshMap</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> gridData <span class="hljs-keyword">in</span> m_Data.GridList.Values)<br>        &#123;<br>            TileBase tile = empty;<br>            <span class="hljs-keyword">if</span> (gridData.GridType == GridType.Wall)<br>            &#123;<br>                tile = wall;<br>            &#125;<br><br>            m_Tilemap.SetTile((Vector3Int)gridData.GridPos, tile);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cnImpulse/SRPG@develop/Images/01.png" alt="网格地图"></p><h2 id="数据序列化和反序列化"><a href="#数据序列化和反序列化" class="headerlink" title="数据序列化和反序列化"></a>数据序列化和反序列化</h2><p>上图显示的地图数据来自于使用地图编辑器编辑并保存的地图数据。</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-comment">// 序列化类实例为json并保存到目标位置</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> path, T data</span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (path == <span class="hljs-literal">null</span> || data == <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">string</span> json = JsonConvert.SerializeObject(data);<br>    FileInfo file = <span class="hljs-keyword">new</span> FileInfo(path);<br>    StreamWriter sw = file.CreateText();<br>    sw.Write(json);<br>    sw.Close();<br>    sw.Dispose();<br>    AssetDatabase.Refresh();<br>&#125;<br><br><span class="hljs-comment">// 按路径读取json文件并反序列化数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T <span class="hljs-title">LoadJsonData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> path</span>)</span><br><span class="hljs-function"></span>&#123;<br>    StreamReader sr = <span class="hljs-keyword">new</span> StreamReader(path);<br>    <span class="hljs-built_in">string</span> json = sr.ReadLine();<br><br>    <span class="hljs-keyword">return</span> JsonConvert.DeserializeObject&lt;T&gt;(json);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里使用序列化函数来自于<a href="https://www.newtonsoft.com/json">Newtonsoft.json</a>。<br>还有另一个更轻量的工具<a href="https://litjson.net/">LitJson</a>。</p><blockquote><p>这里选择前者的原因是, 最新版的unity内置了Newtonsoft.json程序包。</p></blockquote><hr><h2 id="实现GridMap其他辅助功能"><a href="#实现GridMap其他辅助功能" class="headerlink" title="实现GridMap其他辅助功能"></a>实现GridMap其他辅助功能</h2><h3 id="实现鼠标点击单元格事件"><a href="#实现鼠标点击单元格事件" class="headerlink" title="实现鼠标点击单元格事件"></a>实现鼠标点击单元格事件</h3><p>点击地图单元格在战棋游戏中是很基础的用户输入事件。</p><ol><li>GridMap需要实现<strong>IPointerDownHandler</strong>接口</li><li>GridMap需要挂载碰撞体组件, 例如: 组件<strong>BoxCollider2D</strong></li></ol><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-comment">// 代码比较简单, 就不解释了</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnPointerDown</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>&#123;<br>    Vector2Int gridPos = (Vector2Int)m_Tilemap.WorldToCell(eventData.pointerPressRaycast.worldPosition);<br>    GridData gridData = m_Data.GetGridData(gridPos);<br>    <span class="hljs-keyword">if</span> (gridData != <span class="hljs-literal">null</span>)<br>    &#123;<br>        GameEntry.Event.Fire(<span class="hljs-keyword">this</span>, PointGridMapEventArgs.Create(gridData));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>战棋游戏开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>战棋游戏开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>战棋游戏开发-序</title>
    <link href="/2021/09/26/%E6%88%98%E6%A3%8B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%BA%8F/"/>
    <url>/2021/09/26/%E6%88%98%E6%A3%8B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该系列文章为本人开发战棋游戏的回顾总结。</p><p><a href="https://gamedesign.top/2021/10/04/%E6%88%98%E6%A3%8B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E7%BD%91%E6%A0%BC%E5%9C%B0%E5%9B%BE%E7%AF%87/">战棋游戏开发-网格地图篇</a></p><h2 id="游戏玩法设计"><a href="#游戏玩法设计" class="headerlink" title="游戏玩法设计"></a>游戏玩法设计</h2><p>游戏玩法上会主要参考火焰纹章系列<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="火焰纹章wiki">[1]</span></a></sup>,待游戏开发到一定进度时会进行自定义的玩法扩展。</p><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource/images/SRPG/01.jpg" alt="火焰纹章之烈火之剑"></p><h2 id="主要系统"><a href="#主要系统" class="headerlink" title="主要系统"></a>主要系统</h2><ol><li>网格地图</li><li>回合制战斗</li><li>战棋角色培养</li></ol><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>下面是游戏开发使用的引擎和框架。</p><ul><li>游戏引擎: <a href="https://unity.cn/releases">Unity3D</a></li><li>游戏框架: <a href="https://gameframework.cn/">GameFramework</a></li></ul><h2 id="游戏开发进度"><a href="#游戏开发进度" class="headerlink" title="游戏开发进度"></a>游戏开发进度</h2><ol><li>网格地图基础功能 - 完成</li><li>回合制战斗流程 - 完成</li><li>战斗系统扩展(技能 &amp; Buff系统) - 进行中</li></ol><h2 id="游戏源码"><a href="#游戏源码" class="headerlink" title="游戏源码"></a>游戏源码</h2><p><a href="https://github.com/cnImpulse/AGame">项目源码GitHub</a></p><p><img src="https://cdn.jsdelivr.net/gh/cnImpulse/AGame/1.gif" alt="游戏内容录屏"></p><hr><h2 id="系统整体结构"><a href="#系统整体结构" class="headerlink" title="系统整体结构"></a>系统整体结构</h2><p>系统整体结构包括: 战棋战斗系统, 战斗编辑器系统, 其他辅助功能模块</p><p>战棋战斗系统包括: 战场地图模块, 战斗单位模块, 战斗流程模块<br>战斗编辑器系统包括: 地图数据编辑器, 战斗数据编辑器</p><h2 id="战场地图模块"><a href="#战场地图模块" class="headerlink" title="战场地图模块"></a>战场地图模块</h2><p>战场地图设置为四边形网格地图, 使用字典保存地图网格单元数据。</p><p>战场生成步骤:</p><ol><li>反序列化战场地图数据 - 借助<strong>newtonsoft.json</strong></li><li>战场地图渲染 - 借助Unity组件<strong>tilemap</strong></li></ol><h2 id="战斗单位模块"><a href="#战斗单位模块" class="headerlink" title="战斗单位模块"></a>战斗单位模块</h2><p>战斗单位BattleUnit继承于网格单位GridUnit。把和地图交互的基础功能放在基类中, 后续实现例如地图建筑之类的功能时也可以继承GirdUnit, 可以方便的实现扩展。</p><p>构造: 不同的战斗单位通过id读取配置表对应的数据进行构造。<br>与其他模块交互: 尽量使用事件以降低和其他模块的耦合。</p><p>战斗单位自动行动AI初步设计</p><ol><li>攻击目标搜索</li><li>最优移动位置选择</li><li>移动并攻击</li></ol><blockquote><p>后续可能会使用行为树来优化自动行动AI</p></blockquote><h2 id="战斗流程模块"><a href="#战斗流程模块" class="headerlink" title="战斗流程模块"></a>战斗流程模块</h2><p>使用有限状态机管理战斗的各个流程, 有限状态机的实现来自于游戏框架<strong>GameFramework</strong>。</p><p>战斗状态初步划分为: 回合切换状态, 战斗单位行动状态, 战斗单位结束行动状态</p><h2 id="寻路模块"><a href="#寻路模块" class="headerlink" title="寻路模块"></a>寻路模块</h2><p>暂时使用普通的广度优先搜索, 待有性能需求之后改成A*寻路。</p><p>寻路时, 将网格单元数据包装成导航节点数据, 导航节点数据实例使用引用池进行管理以降低频繁分配内存的性能消耗。引用池的实现来自于游戏框架<strong>GameFramework</strong>。</p><h2 id="战斗数据编辑器模块"><a href="#战斗数据编辑器模块" class="headerlink" title="战斗数据编辑器模块"></a>战斗数据编辑器模块</h2><ol><li>借助Unity的<strong>tilemap</strong>组件进行地图绘制, 战斗单元格放置。  </li><li>读取并解析放置的内容为地图数据实例和战斗数据实例。  </li><li>使用<strong>newtonsoft.json</strong>提供的功能把数据序列化为json格式并保存。 </li></ol><h2 id="UI模块"><a href="#UI模块" class="headerlink" title="UI模块"></a>UI模块</h2><p>使用UGUI进行UI界面的开发, 使用<strong>GameFramework</strong>的UI模块进行辅助管理。</p><p>UI开发流程大致为: </p><ol><li>编辑UI界面</li><li>保存为预制体</li><li>配置表填写预制体路径</li><li>编写UI界面逻辑</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zh.wikipedia.org/wiki/%E7%81%AB%E7%84%B0%E4%B9%8B%E7%BA%B9%E7%AB%A0%E7%B3%BB%E5%88%97">火焰纹章wiki</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>战棋游戏开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>战棋游戏开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单的光线追踪器</title>
    <link href="/2021/04/29/%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA%E5%99%A8/"/>
    <url>/2021/04/29/%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开个新坑,希望可以不断完善这个光线追踪器。<br>没有使用IDE, 用的<a href="https://code.visualstudio.com/">VS Code</a>撸的代码。说真的,这么写代码真酸爽。</p><h1 id="Ray-Tracing"><a href="#Ray-Tracing" class="headerlink" title="Ray-Tracing"></a>Ray-Tracing</h1><p><a href="https://github.com/impulses-1/Ray-Tracing">简单的光线追踪器</a></p><h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><p>mac/linux 环境下,控制台运行 <a href="https://github.com/impulses-1/Ray-Tracing/blob/main/build.sh">build.sh</a></p><p>windows 环境下,通过git的命令行工具运行 <a href="https://github.com/impulses-1/Ray-Tracing/blob/main/build.sh">build.sh</a></p><h2 id="mac-环境运行项目示例"><a href="#mac-环境运行项目示例" class="headerlink" title="mac 环境运行项目示例"></a>mac 环境运行项目示例</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd desktop/ray-tracing #进入项目文件<br>chmod +x build.sh      #获得权限<br>./build.sh             #执行build.sh<br></code></pre></div></td></tr></table></figure><h1 id="效果说明"><a href="#效果说明" class="headerlink" title="效果说明"></a>效果说明</h1><p>程序输出的是.ppm格式的图片<br>因为markdown不能展示.ppm,所以效果图都转成了.png格式</p><h2 id="0-1-Get-A-Image"><a href="#0-1-Get-A-Image" class="headerlink" title="0.1 Get A Image"></a>0.1 Get A Image</h2><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/Ray-Tracing/images/0.1.png" alt="0.1 effect"></p><h2 id="0-2-Ray-Into-Scene"><a href="#0-2-Ray-Into-Scene" class="headerlink" title="0.2 Ray Into Scene"></a>0.2 Ray Into Scene</h2><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/Ray-Tracing/images/0.2.png" alt="0.2 effect"></p><h2 id="0-3-Add-A-Sphere"><a href="#0-3-Add-A-Sphere" class="headerlink" title="0.3 Add A Sphere"></a>0.3 Add A Sphere</h2><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/Ray-Tracing/images/0.3.png" alt="0.3 effect"></p><h2 id="0-4-Shading-With-Surface-Normals"><a href="#0-4-Shading-With-Surface-Normals" class="headerlink" title="0.4 Shading With Surface Normals"></a>0.4 Shading With Surface Normals</h2><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/Ray-Tracing/images/0.4.png" alt="0.4 effect"></p><h2 id="0-5-Render-Multiple-Objects"><a href="#0-5-Render-Multiple-Objects" class="headerlink" title="0.5 Render Multiple Objects"></a>0.5 Render Multiple Objects</h2><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/Ray-Tracing/images/0.5.png" alt="0.5 effect"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://raytracing.github.io/books/RayTracingInOneWeekend.html">Ray Tracing in One Weekend</a></li><li><a href="https://www.bilibili.com/video/BV1X7411F744?p=1">Games 101-现代计算机图形学入门-闫令琪</a></li><li><a href="https://github.com/zauonlok/renderer">Software Renderer</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>光线追踪器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图形学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏设计四元法</title>
    <link href="/2021/04/06/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E5%9B%9B%E5%85%83%E6%B3%95/"/>
    <url>/2021/04/06/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E5%9B%9B%E5%85%83%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该文章知识点大部分来自<a href="https://en.wikipedia.org/wiki/Jesse_Schell">Jesse Schell</a>的著作<a href="https://baike.baidu.com/item/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E8%89%BA%E6%9C%AF%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89">《游戏设计艺术》</a>。</p><p>四元法是由Jesse Schell于《游戏设计艺术》提出的一种游戏分析框架。</p><h2 id="四元法"><a href="#四元法" class="headerlink" title="四元法"></a>四元法</h2><p>四元法将构成游戏的元素划分为四种类型,分别为 美学、故事、机制、技术。<br><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.1.2/images/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/1.png" alt="四元法"></p><h2 id="四种元素"><a href="#四种元素" class="headerlink" title="四种元素"></a>四种元素</h2><ol><li>美学<blockquote><p>美学是指游戏的外在表现,例如画面、音乐。<br>美学不限定在游戏本身,例如<a href="https://zh.wikipedia.org/wiki/%E5%AF%BB%E5%89%91">雅达利寻剑</a>。</p></blockquote></li><li>故事<blockquote><p>故事又可以说是剧情,故事可以有多种表达方式: 线性、分支、或者是像<a href="https://zh.wikipedia.org/zh-cn/%E9%BB%91%E6%9A%97%E9%9D%88%E9%AD%82">黑暗之魂</a>那样通过零碎的描述来模糊的介绍故事。</p></blockquote></li><li>机制<blockquote><p>机制指游戏的过程和规则,包括游戏世界的运行规则、和玩家的交互规则等等。<br>机制使游戏区别于其他艺术形式。</p></blockquote></li><li>技术<blockquote><p>技术是实现游戏的手段。<br>桌游和电子游戏都是游戏,他们的实现”技术”不同。</p></blockquote></li></ol><p>我们可以浅显的说: </p><blockquote><p>如果设计游戏是造人的话,那么美学是皮肤,故事是血肉,技术是骨骼,机制是灵魂。</p></blockquote><p>这样说好像有点不太准确,Jesse Schell说: <strong>没有任何一种元素比其他的更重要</strong>。<br>但是从游戏设计师的角度来说,我还是觉得机制要重要一些。</p><p>后话-在第12章,Jesse Schell说: <strong>游戏机制是游戏真正的核心</strong>(偷笑)</p><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>不管哪个元素重要,他们目的都是为了塑造<strong>体验</strong>。<br>每种元素都是为了通过游戏让玩家获得某种<strong>积极</strong>的体验(游戏不一定积极,但是带来的对现实世界的思考得是积极的)。<br>四种元素相互影响,相互加强,核心目的都是为了更好的传达这种体验。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>游戏: <a href="https://zh.wikipedia.org/wiki/%E8%94%9A%E8%97%8D_(%E9%81%8A%E6%88%B2)">蔚蓝</a></p><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.1.2/images/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/2.gif" alt="蔚蓝"></p><ul><li>体验: 从玩家角度出发,体验是各不相同的。对于我而言,通关蔚蓝之后最大的体验就是: 克服困难,不惧失败,最终登顶。</li></ul><ol><li><p>机制: 最重要的机制是主角的跳跃和冲刺,这是对爬山过程的抽象。大多数时候,我们的角色都是从关卡下方进入,通过跳跃和冲刺,到关卡上方过关。这个机制就是在表示,我们玩的游戏是在攀登一座山。</p></li><li><p>故事: 一句话概括: 主角在登山过程中和自己和解,最终登山山顶。故事可以更好的让玩家代入角色。我们随着游戏进行逐渐了解主角,我们会逐渐感受到主角的体验,主角的振作也会让我们受到鼓舞,坚定登顶的决心。</p></li><li><p>美学: 游戏中激烈的狂风,各种机关障碍,都是在模拟登山的困难。还有一些美术细节: 主角的头发会随风飘动,跳跃和落地会激起尘土。游戏中的音乐也是值得称道,但是我对于音乐没什么研究,说不出什么漂亮话。</p></li><li><p>技术: <a href="https://www.bilibili.com/video/BV1M441197sr?from=search&seid=12343706201943940518">游戏手感赏析</a>。虽然是2D游戏,但是蔚蓝的技术力是很高的,为了实现平滑自然的手感,开发者做了很多细节设计。开发者开源的5000行代码被誉为<strong>目前横版跳跃类游戏的天花板</strong>。蔚蓝里面优秀的技术更好的实现了机制和美学。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>游戏设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2D游戏神器-RuleTile</title>
    <link href="/2021/03/20/2D%E6%B8%B8%E6%88%8F%E7%A5%9E%E5%99%A8-RuleTile/"/>
    <url>/2021/03/20/2D%E6%B8%B8%E6%88%8F%E7%A5%9E%E5%99%A8-RuleTile/</url>
    
    <content type="html"><![CDATA[<h2 id="Tilemap"><a href="#Tilemap" class="headerlink" title="Tilemap"></a>Tilemap</h2><p>Tilemap是一种地图编辑方式,使用Tilemap可以让我们就像搭积木一样快速搭建地图。<br>许多2D游戏都是使用的这样的方式构建地图,例如: 泰拉瑞亚,蔚蓝,甚至是饥荒</p><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.1.1/images/tilemap/1.jpeg" alt="泰拉瑞亚"></p><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.1.1/images/tilemap/2.jpeg" alt="蔚蓝"></p><p>Unity在2017版本引入<a href="https://docs.unity3d.com/2021.1/Documentation/Manual/class-Tilemap.html">Tilemap</a>组件,并在随后的几年版本里逐渐完善。</p><h2 id="RuleTile"><a href="#RuleTile" class="headerlink" title="RuleTile"></a>RuleTile</h2><p>但是我们今天要讲的不是Tilemap,而是Tilemap的进阶工具-RuleTile。</p><p>在使用Tilemap搭建地图时,我们会发现这样还是太低效了,我们的2D地图是有特定规则的,例如地表的瓦片和地底的瓦片不同,中间的瓦片和两边的瓦片不同。<br><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.1.1/images/tilemap/3.png" alt="有特定规则的地图"></p><p>有没有办法,让计算机帮我们计算这些规则,而我们只需要勾勒出地图轮廓呢。<br>还真有,不过需要我们下载Unity的2D扩展包,里面包含了RuleTile。</p><h2 id="安装2d-extras"><a href="#安装2d-extras" class="headerlink" title="安装2d-extras"></a>安装2d-extras</h2><p><a href="https://github.com/Unity-Technologies/2d-extras">2d-extras GitHub地址</a></p><p>有两种下载方式</p><ol><li>下载压缩包并解压到Unity项目Assets文件夹中。</li><li>下载仓库并添加到Unity的包管理器。 -具体方式见2d-extras的README</li></ol><p>添加到项目里面之后,我们会发现在Creat最上面有一个2D选项,我们可以在那里选择创建各种瓦片或者笔刷。</p><h2 id="使用RuleTile"><a href="#使用RuleTile" class="headerlink" title="使用RuleTile"></a>使用RuleTile</h2><p>开始搭地图,一张相对完整的Tilemap需要7种基础瓦片。<br><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.1.1/images/tilemap/4.jpg" alt="基础瓦片"><br>7种瓦片经过旋转和组合就可以构成一个2D游戏地图了。</p><p>接下来开始创建2D地图</p><ol><li>建空项目</li><li>添加2d-extras</li><li>添加Tilemap到场景</li><li>添加7种基础瓦片图片</li><li>创建一个RuleTile并设定显示规则</li><li>创建画板,添加刚刚的RuleTile</li><li>画地图</li></ol><h2 id="RuleTile设置"><a href="#RuleTile设置" class="headerlink" title="RuleTile设置"></a>RuleTile设置</h2><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.1.1/images/tilemap/5.png" alt="瓦片规则"><br>瓦片规则的设置特别简单,就是设置那个九宫格。<br>绿箭头代表有格子,红叉代表没有格子。我们根据每种瓦片的显示一条条设置就行。<br>九宫格中间可以设置旋转,这样我们就不用自己设置旋转之后的规则了。</p><p>例如:<br>第一条规则,当该瓦片上边和左边没有瓦片,且下边和右边有瓦片时,显示右侧精灵图。<br>如果旋转该瓦片之后也符合规则,则旋转精灵图并显示。</p><p>再比如:<br>第三条规则,如果四边都没有瓦片,就显示该精灵图。并且没有设置旋转。</p><p>最终效果如下<br><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.1.1/images/tilemap/6.png" alt="效果地图"></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>Unity版本: 2019.2.17f1<br><a href="https://github.com/impulses-1/RuleTile-Study">项目GitHub地址</a></p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>Tilemap 不仅可以把2D图片当成瓦片,一样支持3D物体甚至是动画。<br>我们可以把一些效果做成预制体,然后当成瓦片刷上去,还是有很大的发挥空间的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.unity3d.com/Manual/class-Tilemap.html">Unity官方文档</a></li><li><a href="https://gameinstitute.qq.com/community/detail/121256">Unity中使用Tilemap快速创建2D游戏世界</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Unity学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2D游戏开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++内联(inline)函数</title>
    <link href="/2021/02/22/C-%E5%86%85%E8%81%94-inline-%E5%87%BD%E6%95%B0/"/>
    <url>/2021/02/22/C-%E5%86%85%E8%81%94-inline-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="内联函数要解决什么问题"><a href="#内联函数要解决什么问题" class="headerlink" title="内联函数要解决什么问题"></a>内联函数要解决什么问题</h2><p>函数调用是需要额外开销的,假如有一些短小简单的函数被频繁调用,会大量消耗栈空间。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//判断闰年</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isLeapYear</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">leapYearsCount</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; years)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;years.size();++i)&#123;<br>        <span class="hljs-keyword">if</span>(isLearYear(years[i])) ++ans;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>isLeapYear()这个简单函数被多次调用,浪费栈空间和时间！<br>有没有什么办法节约这部分开销</p><h2 id="内联函数原理"><a href="#内联函数原理" class="headerlink" title="内联函数原理"></a>内联函数原理</h2><p>有人会这么写代码</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">leapYearsCount</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; years)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;years.size();++i)&#123;<br>        <span class="hljs-keyword">if</span>(year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>) ++ans;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>减少了多次调用函数的开销,但是破坏了函数的可读性,简单的说就是代码变丑了,代码会变的不易修改。</p><blockquote><p>为了实现编译器自动替换函数体,我们可以通过<strong>inline</strong>关键字,将函数声明为<strong>内联函数</strong>。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//判断闰年</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">isLeapYear</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">leapYearsCount</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; years)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;years.size();++i)&#123;<br>        <span class="hljs-keyword">if</span>(isLearYear(years[i])) ++ans;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样既可以也函数形式在程序里使用isLeapYear(), 又不用在运行时承担额外开销。</p><h2 id="内联函数优缺点"><a href="#内联函数优缺点" class="headerlink" title="内联函数优缺点"></a>内联函数优缺点</h2><blockquote><p>优点</p><ol><li>它通过避免函数调用所带来的开销来提高你程序的运行速度。</li><li>当函数调用发生时，它节省了变量弹栈、压栈的开销。</li><li>它避免了一个函数执行完返回原现场的开销。</li><li>通过将函数声明为内联，你可以把函数定义放在头文件内。</li></ol></blockquote><blockquote><p>缺点：</p><ol><li>因为代码的扩展，内联函数增大了可执行程序的体积。</li><li>C++内联函数的展开是中编译阶段，这就意味着如果你的内联函数发生了改动，那么就需要重新编译代码。</li></ol></blockquote><h2 id="什么时候函数适合定义为内联"><a href="#什么时候函数适合定义为内联" class="headerlink" title="什么时候函数适合定义为内联"></a>什么时候函数适合定义为内联</h2><ol><li>函数尽量的短(&lt;10行)</li><li>函数简单(不能有复杂语句while,switch等)</li><li>内联函数不能递归调用自己</li><li>inline可以修饰虚函数,但是虚函数发生动态绑定时不能内联</li></ol><blockquote><p>注意:</p><ol><li>inline声明是对编译器的一种<strong>建议</strong>,编译器是否觉得采取你的建议取决于函数是否符合内联的有利条件。</li><li>如果<strong>函数体非常大</strong>，那么编译器将忽略函数的内联声明，而将内联函数作为普通函数处理。</li><li>内联函数的实现应该放在.h文件中</li></ol></blockquote><h2 id="内联函数和宏定义的区别"><a href="#内联函数和宏定义的区别" class="headerlink" title="内联函数和宏定义的区别"></a>内联函数和宏定义的区别</h2><ol><li>宏由预处理器在预处理阶段展开,内联函数是由编译器控制的。</li><li>在编译的时候，内联函数直接被嵌入到目标代码中去，而宏只是一个简单的文本替换。</li><li>内联函数是函数,可以进行诸如类型安全检查、语句是否正确等编译功能。宏不是函数,不具有这样的功能。</li><li>内联函数在运行时可调试，宏定义不可以。</li></ol><h2 id="编译器默认内联的情况"><a href="#编译器默认内联的情况" class="headerlink" title="编译器默认内联的情况"></a>编译器默认内联的情况</h2><p>在类体内定义的函数会被编译器自动声明为内联函数。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.cnblogs.com/qg-whz/p/4641479.html">博客-C++内联函数</a></li><li><a href="https://www.runoob.com/cplusplus/cpp-inline-functions.html">菜鸟教程-C++内联函数</a></li><li><a href="https://www.cnblogs.com/chengxuyuancc/archive/2013/04/04/2999844.html">博客-宏定义和内联函数区别</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>C++深入学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++的多态和虚函数原理</title>
    <link href="/2021/02/19/C++%E7%9A%84%E5%A4%9A%E6%80%81%E5%92%8C%E8%99%9A%E5%87%BD%E6%95%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2021/02/19/C++%E7%9A%84%E5%A4%9A%E6%80%81%E5%92%8C%E8%99%9A%E5%87%BD%E6%95%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="多态概念"><a href="#多态概念" class="headerlink" title="多态概念"></a>多态概念</h1><h2 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a>什么是多态</h2><p>多态是面向对象三大特性之一: <strong>封装,继承,多态</strong>。</p><blockquote><p>多态指同一个实体同时具有多种形式。</p></blockquote><blockquote><p>多态（Polymorphism）按字面的意思就是“多种状态”。在面向对象语言中，接口的多种不同的实现方式即为多态。</p></blockquote><blockquote><p>同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的<strong>指针</strong>，来调用派生类中的方法。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="百度百科-多态">[1]</span></a></sup></p></blockquote><p>多态可以根据状态确定时间分为: <strong>静态多态</strong> 和 <strong>动态多态</strong>。<br>静态多态: 编译期确定<br>动态多态: 运行时确定</p><h2 id="为什么需要多态"><a href="#为什么需要多态" class="headerlink" title="为什么需要多态"></a>为什么需要多态</h2><p>为了实现代码复用。<br>同时还可以降低类之间的耦合度。</p><p>假设我要写一个排序函数<br>如果我写成:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>Sort()函数接受一个int类型数组并对该数组进行排序。<br>但是int类型是写死了的,这意味着如果我还要对double,long等类型进行排序,还需要写几个大同小异的函数。</p></blockquote><p>例如: </p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SortInt</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> </span>&#123;...&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SortDouble</span><span class="hljs-params">(<span class="hljs-keyword">double</span>[] a)</span> </span>&#123;...&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SortLong</span><span class="hljs-params">(<span class="hljs-keyword">long</span>[] a)</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>蛋疼的<strong>重复</strong>,重复不仅浪费时间,还会增加你出错的几率,假如我们想改变排序方式,就得同时改3个函数。这好吗? 这不好。<br>我们可以通过<strong>模版</strong>来解决这个问题,这是一种静态多态。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomAccessIterator</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(RandomAccessIterator first, RandomAccessIterator last)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (first != last) &#123;<br>        __introsort_loop(first, last, value_type(first), __lg(last - first) * <span class="hljs-number">2</span>);<br>        __final_insertion_sort(first, last);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>这是C++的 sort()函数源码。它是一个模板函数，只接受随机访问迭代器。<br>只要我们放入的参数类型可以比较,且有随机访问迭代器。就都可以使用该函数。美滋滋。</p></blockquote><p>动态多态的实现和解决的问题,后面再谈。</p><p>总而言之我们通过多态来实现 函数/类/接口/等其他实体 的一次定义就可以适应不同的类型。</p><h2 id="怎么实现多态"><a href="#怎么实现多态" class="headerlink" title="怎么实现多态"></a>怎么实现多态</h2><p>多态的实现都是通过<strong>延迟确认类型</strong>来确定的。</p><p>例如上面的代码例子,函数的参数类型在我写代码的时候就确定下来了,这就很僵化。<br>静态多态就是把这个类型确定的时间延迟到了编译时由编译器确定。<br>动态多态就是在程序跑起来了,运行到某个对象的虚函数的时候根据该对象的<strong>虚指针</strong>找到<strong>虚表</strong>,然后确定具体调用哪个函数。</p><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.9/images/C++/1.png" alt="两种多态"></p><p>PS: <strong>函数重载也是一种静态多态</strong></p><hr><h1 id="虚函数详解"><a href="#虚函数详解" class="headerlink" title="虚函数详解"></a>虚函数详解</h1><h2 id="什么是虚函数"><a href="#什么是虚函数" class="headerlink" title="什么是虚函数"></a>什么是虚函数</h2><blockquote><p>虚函数 是在基类中使用关键字<strong>virtual</strong>声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。<br>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为动态链接，或后期绑定。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="菜鸟教程-C++多态">[2]</span></a></sup></p></blockquote><p>C++动态多态是通过虚函数实现的。</p><p>在代码中存在<strong>继承</strong>关系时,假如在基类中声明了虚函数,然后派生类覆盖/重写(<strong>override</strong>)了基类的虚函数,我们就可以通过基类的指针或引用调用派生类重写的方法。</p><h2 id="代码样例"><a href="#代码样例" class="headerlink" title="代码样例"></a>代码样例</h2><p>假设我要做一个武器系统,现在预定有三种武器: 刀,枪,棍。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// v0.1</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Knife</span>&#123;</span> <span class="hljs-comment">//刀</span><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Knife() &#123;atk = <span class="hljs-number">2</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;劈砍\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Spear</span>&#123;</span> <span class="hljs-comment">//枪</span><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Spear() &#123;atk = <span class="hljs-number">3</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;刺击\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cudgel</span>&#123;</span> <span class="hljs-comment">//棍</span><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Cudgel() &#123;atk = <span class="hljs-number">4</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;砸\n&quot;</span>;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>写完了,但是代码里有许多的重复部分,在写程序时可以确定是: <strong>重复是万恶之源</strong>。<br>学过继承的话,我们就知道,这个时候应该把这三个类的共有部分抽出来做成一个基类。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// v0.2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weapon</span>&#123;</span> <span class="hljs-comment">//武器基类</span><br>    <span class="hljs-keyword">protected</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Weapon() &#123;atk = <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;不知道怎么攻击\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Knife</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Knife() &#123;atk = <span class="hljs-number">2</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;劈砍\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Spear</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Spear() &#123;atk = <span class="hljs-number">3</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;刺击\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cudgel</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Cudgel() &#123;atk = <span class="hljs-number">4</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;砸\n&quot;</span>;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>我们把武器的攻击力 atk成员放入Weapon,但是攻击函数 Attack()仍然放在派生类里。<br>因为在Weapon里我们是不知道武器怎么攻击的,所以攻击函数是空的。</p><p>现在在mian()函数里,如果我们通过基类的指针指向派生类内存,然后调用Attack()会发生什么?<br>这是一个常见操作,因为通过基类指针处理派生类可以使我们关注派生类的<strong>共性</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Weapon *weapon;<br>    Knife knife;<br>    Spear spear;<br>    Cudgel cudgel;<br><br>    weapon = &amp;knife;<br>    weapon-&gt;Attack();<br>    weapon = &amp;spear;<br>    weapon-&gt;Attack();<br>    weapon = &amp;cudgel;<br>    weapon-&gt;Attack();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果显而易见:</p><blockquote><p>不知道怎么攻击<br>不知道怎么攻击<br>不知道怎么攻击</p></blockquote><p>因为weapon找不派生类的Attack()函数,它只知道它自己的Attack()。</p><p>现在我们用上虚函数,就是在基类需要声明为虚函数的函数前面加上 <strong>virtual</strong>关键字。<br>进行重写: 在具体派生类声明一个同函数签名的函数,<strong>并用override</strong>修饰。可以不加,建议加上。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// v0.3</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weapon</span>&#123;</span> <span class="hljs-comment">//武器基类</span><br>    <span class="hljs-keyword">protected</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Weapon() &#123;atk = <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;不知道怎么攻击\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Knife</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Knife() &#123;atk = <span class="hljs-number">2</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;劈砍\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Spear</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Spear() &#123;atk = <span class="hljs-number">3</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;刺击\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cudgel</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Cudgel() &#123;atk = <span class="hljs-number">4</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;砸\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Weapon *weapon;<br>    Knife knife;<br>    Spear spear;<br>    Cudgel cudgel;<br><br>    weapon = &amp;knife;<br>    weapon-&gt;Attack();<br>    weapon = &amp;spear;<br>    weapon-&gt;Attack();<br>    weapon = &amp;cudgel;<br>    weapon-&gt;Attack();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果:</p><blockquote><p>劈砍<br>刺击<br>砸</p></blockquote><p>我们成功使用了虚函数! 我们现在可以通过基类的指针访问派生类实现的Attack()函数。</p><p>但是这什么怎么实现的呢?<br>为什么通过基类的指针就会访问派生类的Attack()而不是基类的Attack()呢?</p><h2 id="虚函数表和虚指针"><a href="#虚函数表和虚指针" class="headerlink" title="虚函数表和虚指针"></a>虚函数表和虚指针</h2><blockquote><p>虚函数表(vtbl)<br>在每个包含虚函数的类中都存在着一个函数地址的<strong>数组</strong>。这就是虚函数表。<br>当我们用父类的指针来操作一个子类的时候，这张虚函数表指明了实际所应该调用的函数。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="博客-深入理解C++虚函数表">[3]</span></a></sup></p><ol><li>虚函数表的数据结构就是: <strong>函数指针数组</strong></li><li>一个包含虚函数的类的所有实例共享一张虚函数表</li></ol></blockquote><blockquote><p>虚指针(vptr)<br>每个包含虚函数的类都存在一个隐藏成员,就是虚指针(vptr),虚指针指向虚函数表。<br>虚指针的作用就是方便类的每一个实例对象快速找到该类的虚函数表。</p></blockquote><h2 id="内存分布"><a href="#内存分布" class="headerlink" title="内存分布"></a>内存分布</h2><p>用上方的代码例子来说明虚表和虚指针的内存分布。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weapon</span>&#123;</span> <span class="hljs-comment">//武器基类</span><br>    <span class="hljs-keyword">protected</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Weapon() &#123;atk = <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;不知道怎么攻击\n&quot;</span>;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.9/images/C++/2.png" alt="Weapon的虚表"></p><p>类实例对象的虚指针是<strong>隐藏</strong>的,它指向该类的虚表的起点。所有相同的相同类的实例的虚指针都是指向的同一张虚表。</p><blockquote><p>虚表有一个尾节点,表示虚表的结束。就像字符串的结束字符<code>&#39;/0&#39;</code>一样。<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="博客-C++虚函数表原理浅析">[4]</span></a></sup></p></blockquote><p>假如派生类 Knife这样定义</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Knife</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Knife() &#123;atk = <span class="hljs-number">2</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-title">Bleed</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;附带流血效果\n&quot;</span>;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>Knife没有重写基类的虚函数,并且自己又声明一个新的虚函数,虚表会是什么样的?</p><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.9/images/C++/3.png" alt="Knife的虚表"><br>因为没有重写Attack(),Knife虚表前面和Weapon一样,即如果实例调用Attack()函数的话会被虚表导航到Weapon基类的Attack()函数那里。<br>同时Knife虚表后面有新的节点,指向自己的Bleed()函数。</p><p>现在Knife重写Attack()函数</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Knife</span> :</span> <span class="hljs-keyword">public</span> Weapon&#123;<br>    <span class="hljs-keyword">public</span>:<br>        Knife() &#123;atk = <span class="hljs-number">2</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;劈砍\n&quot;</span>;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-title">Bleed</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;附带流血效果\n&quot;</span>;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.9/images/C++/4.png" alt="重写之后的Knife的虚表"></p><p>我们发现重写之后,原来指向基类Attack()的函数指针被覆盖了,变成了指向自己重写之后的Attack()函数。</p><h2 id="多继承情况"><a href="#多继承情况" class="headerlink" title="多继承情况"></a>多继承情况</h2><p>派生类的虚表也是继承自基类的,即当继承多个基类时,多个基类加起来有多少虚表,派生类就有几个虚表,有几张虚表类实例就有多少虚指针。<br>如果派生类有自己的虚函数,会添加到第一个虚函数表的末尾。</p><h2 id="虚函数使用建议及解释"><a href="#虚函数使用建议及解释" class="headerlink" title="虚函数使用建议及解释"></a>虚函数使用建议及解释</h2><ol><li><p><strong>构造函数</strong>能声明成虚函数吗?</p><blockquote><p>不能！<br>调用构造函数函数时,对象的内存空间还没有确定下来,那么虚指针(vptr)也不存在,无法找到虚表。</p></blockquote></li><li><p>基类的析构函数最好声明为虚函数。</p><blockquote><p>为了防止内存泄漏,当我们用基类的指针delete派生类的内存时,如果基类的析构函数不是虚函数,那么delete操作符只会调用基类的析构函数,如果派生类动态申请了内存就无法释放。</p></blockquote></li></ol><blockquote><p>假如基类析构函数<strong>不是</strong>虚函数: 通过基类指针delete派生类,只调用基类的析构函数。<br>假如基类析构函数<strong>是</strong>虚函数: 通过基类指针delete派生类,先调用派生类的析构函数,然后调用基类的析构函数。</p></blockquote><h2 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h2><blockquote><p>基类声明的虚函数可以不实现,那么该函数就是<strong>纯虚函数</strong>。</p></blockquote><blockquote><p>至少有一个纯虚函数的类就是抽象类,因为纯虚函数没有实现,抽象类是<strong>无法被实例化</strong>的。<br>派生自抽象类的类<strong>必须重写</strong>抽象基类的所有纯虚函数,否则会引发编译错误。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weapon</span>&#123;</span> <span class="hljs-comment">//武器基类</span><br>    <span class="hljs-keyword">protected</span>:<br>        <span class="hljs-keyword">int</span> atk;<br>    <span class="hljs-keyword">public</span>:<br>        Weapon() &#123;atk = <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-comment">// 纯虚函数的函数体被 &quot;=0;&quot; 代替,表示基类不实现,留给派生类实现。</span><br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h2><blockquote><p>重载: 函数名相同,函数的参数个数、参数类型或参数顺序三者中必须至少有一种不同。函数返回值的类型可以相同,也可以不相同。发生在一个类内部。</p></blockquote><blockquote><p>重写: 也叫做覆盖,一般发生在子类和父类继承关系之间。子类重新实现父类中有相同名称和参数的虚函数。</p></blockquote><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://baike.baidu.com/item/%E5%A4%9A%E6%80%81">百度百科-多态</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.runoob.com/cplusplus/cpp-polymorphism.html">菜鸟教程-C++多态</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.cnblogs.com/Mered1th/p/10924545.html#%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3c-%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8">博客-深入理解C++虚函数表</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.cnblogs.com/zhxmdefj/p/11594459.html">博客-C++虚函数表原理浅析</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>C++深入学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>细节和抽象</title>
    <link href="/2021/02/06/%E7%BB%86%E8%8A%82%E5%92%8C%E6%8A%BD%E8%B1%A1/"/>
    <url>/2021/02/06/%E7%BB%86%E8%8A%82%E5%92%8C%E6%8A%BD%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>细节和抽象是相对的。</p><p>应用程序的细节依赖于高级语言的抽象<br>高级语言的细节依赖于汇编语言的抽象<br>……<br>低层的抽象构成了高层的细节,更高层的细节又依赖于本层的抽象</p><p>一层层对低层的抽象，构成了我们现在使用的应用程序。<br>可以说所有系统设计的艺术，归根到底就是<strong>抽象封装</strong>的艺术。</p><p>把不同的细节组合成元件，把元件组合成更大的元件，随着一层层的组装，思路会越来越清晰，因为”细节“被屏蔽了。</p><h2 id="设计模式六大原则之依赖倒置原则"><a href="#设计模式六大原则之依赖倒置原则" class="headerlink" title="设计模式六大原则之依赖倒置原则"></a>设计模式六大原则之依赖倒置原则</h2><p>描述：<br>高层模块不应该依赖低层模块，两者都应该依赖其抽象。抽象不应该依赖细节，细节应该依赖抽象。</p><p>核心思想：<strong>要面向接口编程，不要面向实现编程。</strong></p><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><ol><li>细节是多变的，如果高层模块依赖于低层模块，那么低层变化就导致高层也得跟着变化。</li><li>如果通过接口把两层都抽象出来，高层通过低层的接口调用细节，那么无论低层怎么变化，只要接口没有变化，那么高层就不用变化。</li><li>抽象不应该依赖细节，抽象只关注我要做什么，实现是细节的工作。同时高层的抽象也依赖的是低层的抽象。</li><li>细节应该依赖于抽象，细节太多，太杂了，抽象就是对细节对约束。</li><li>写程序的时候，先把我需要什么想好，再去想实现需求的细节。</li><li>把层次分清，写的程序就是千层饼，清晰明了。如果所有程序互相调用，挤成一团，牵一发而动全身，那么这个程序就是失败的一坨不明物体。</li></ol><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.7/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.png" alt="细节依赖细节"><br><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.7/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.png" alt="细节依赖抽象"></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初次见面</title>
    <link href="/2021/02/04/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2/"/>
    <url>/2021/02/04/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>你好<br>我是一个计科专业的大三学生，一个学习中的游戏开发者。<br>这里是我的个人博客网站，我会在这里分享一些游戏相关的教程，促进自己也能帮助他人。</p><p><img src="https://cdn.jsdelivr.net/gh/impulses-1/BlogSource@0.0.1/images/01.jpg" alt="鸮鸮镇楼"></p><hr><h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><p>我目前学习的比较多的是Unity3D，所以教程大多会与Unity3D相关。</p><h2 id="再见"><a href="#再见" class="headerlink" title="再见"></a>再见</h2><p>那么，希望这个新搭建的博客网站能见证我的成长之路。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>关于我</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
